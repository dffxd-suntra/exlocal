#!/usr/bin/env node

// 引模块
let debug = require("debug")("exlocal:server");
let fs = require("fs");

// 读取配置文件
let config = readConfig();
process.env.config = config;
debug(config);

// 引入应用本体
let app = require("../app");

if (config.http) {
    var http = require("http");

    var http_port = normalizePort(process.env.HTTP_PORT || config.http_port);
    var http_host = process.env.HTTP_HOST || config.http_host;
    app.set("http_port", http_port);
    app.set("http_host", http_host);

    var http_server = http.createServer(app);

    http_server.listen(http_port, http_host);
    http_server.on("error", onError);

    console.log(`
http服务器运行在 http://${http_host}:${http_port}/
如需要结束请输入组合键ctrl+c或在拥有服主权限的管理员面板中关闭服务器
`);
}

if (config.https) {
    var https = require("https");

    var https_port = normalizePort(process.env.HTTPS_PORT || config.https_port);
    var https_host = process.env.HTTPS_HOST || config.https_host;
    app.set("https_port", https_port);
    app.set("https_host", https_host);

    var https_options = {
        key: fs.readFileSync(config.https_key),
        cert: fs.readFileSync(config.https_cert)
    };

    var https_server = https.createServer(options, app);

    https_server.listen(https_port, https_host);
    https_server.on("error", onError);

    console.log(`
https服务器运行在 https://${https_host}:${https_port}/
如需要结束请输入组合键ctrl+c或在拥有服主权限的管理员面板中关闭服务器
`);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    let bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * 读取并合并配置文件
 */

function readConfig() {
    let defaultConfig = require("../config/default.config");
    let userConfig = require("../config/user.config");

    for (let i in userConfig) {
        defaultConfig[i] = userConfig[i];
    }

    return defaultConfig;
}